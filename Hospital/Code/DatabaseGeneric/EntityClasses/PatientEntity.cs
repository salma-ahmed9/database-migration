//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.10.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Hospital.HelperClasses;
using Hospital.FactoryClasses;
using Hospital.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Hospital.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'Patient'.<br/><br/></summary>
	[Serializable]
	public partial class PatientEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private DoctorEntity _doctor;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static PatientEntityStaticMetaData _staticMetaData = new PatientEntityStaticMetaData();
		private static PatientRelations _relationsFactory = new PatientRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Doctor</summary>
			public static readonly string Doctor = "Doctor";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class PatientEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public PatientEntityStaticMetaData()
			{
				SetEntityCoreInfo("PatientEntity", InheritanceHierarchyType.None, false, (int)Hospital.EntityType.PatientEntity, typeof(PatientEntity), typeof(PatientEntityFactory), false);
				AddNavigatorMetaData<PatientEntity, DoctorEntity>("Doctor", "Patients", (a, b) => a._doctor = b, a => a._doctor, (a, b) => a.Doctor = b, Hospital.RelationClasses.StaticPatientRelations.DoctorEntityUsingAssignedDoctorIdStatic, ()=>new PatientRelations().DoctorEntityUsingAssignedDoctorId, null, new int[] { (int)PatientFieldIndex.AssignedDoctorId }, null, true, (int)Hospital.EntityType.DoctorEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static PatientEntity()
		{
		}

		/// <summary> CTor</summary>
		public PatientEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public PatientEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this PatientEntity</param>
		public PatientEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Patient which data should be fetched into this Patient object</param>
		public PatientEntity(System.Int64 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Patient which data should be fetched into this Patient object</param>
		/// <param name="validator">The custom validator object for this PatientEntity</param>
		public PatientEntity(System.Int64 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected PatientEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Doctor' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoDoctor() { return CreateRelationInfoForNavigator("Doctor"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this PatientEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static PatientRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Doctor' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathDoctor { get { return _staticMetaData.GetPrefetchPathElement("Doctor", CommonEntityBase.CreateEntityCollection<DoctorEntity>()); } }

		/// <summary>The Address property of the Entity Patient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "patient"."address".<br/>Table field type characteristics (type, precision, scale, length): Text, 0, 0, 1073741824.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Address
		{
			get { return (System.String)GetValue((int)PatientFieldIndex.Address, true); }
			set	{ SetValue((int)PatientFieldIndex.Address, value); }
		}

		/// <summary>The AssignedDoctorId property of the Entity Patient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "patient"."assigned_doctor_id".<br/>Table field type characteristics (type, precision, scale, length): Bigint, 20, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int64 AssignedDoctorId
		{
			get { return (System.Int64)GetValue((int)PatientFieldIndex.AssignedDoctorId, true); }
			set	{ SetValue((int)PatientFieldIndex.AssignedDoctorId, value); }
		}

		/// <summary>The Email property of the Entity Patient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "patient"."email".<br/>Table field type characteristics (type, precision, scale, length): Text, 0, 0, 1073741824.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Email
		{
			get { return (System.String)GetValue((int)PatientFieldIndex.Email, true); }
			set	{ SetValue((int)PatientFieldIndex.Email, value); }
		}

		/// <summary>The FirstName property of the Entity Patient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "patient"."first_name".<br/>Table field type characteristics (type, precision, scale, length): Varchar, 0, 0, 100.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String FirstName
		{
			get { return (System.String)GetValue((int)PatientFieldIndex.FirstName, true); }
			set	{ SetValue((int)PatientFieldIndex.FirstName, value); }
		}

		/// <summary>The Id property of the Entity Patient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "patient"."id".<br/>Table field type characteristics (type, precision, scale, length): Bigint, 20, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int64 Id
		{
			get { return (System.Int64)GetValue((int)PatientFieldIndex.Id, true); }
			set { SetValue((int)PatientFieldIndex.Id, value); }		}

		/// <summary>The LastName property of the Entity Patient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "patient"."last_name".<br/>Table field type characteristics (type, precision, scale, length): Varchar, 0, 0, 100.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String LastName
		{
			get { return (System.String)GetValue((int)PatientFieldIndex.LastName, true); }
			set	{ SetValue((int)PatientFieldIndex.LastName, value); }
		}

		/// <summary>Gets / sets related entity of type 'DoctorEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual DoctorEntity Doctor
		{
			get { return _doctor; }
			set { SetSingleRelatedEntityNavigator(value, "Doctor"); }
		}
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace Hospital
{
	public enum PatientFieldIndex
	{
		///<summary>Address. </summary>
		Address,
		///<summary>AssignedDoctorId. </summary>
		AssignedDoctorId,
		///<summary>Email. </summary>
		Email,
		///<summary>FirstName. </summary>
		FirstName,
		///<summary>Id. </summary>
		Id,
		///<summary>LastName. </summary>
		LastName,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Hospital.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Patient. </summary>
	public partial class PatientRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between PatientEntity and DoctorEntity over the m:1 relation they have, using the relation between the fields: Patient.AssignedDoctorId - Doctor.Id</summary>
		public virtual IEntityRelation DoctorEntityUsingAssignedDoctorId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Doctor", false, new[] { DoctorFields.Id, PatientFields.AssignedDoctorId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticPatientRelations
	{
		internal static readonly IEntityRelation DoctorEntityUsingAssignedDoctorIdStatic = new PatientRelations().DoctorEntityUsingAssignedDoctorId;

		/// <summary>CTor</summary>
		static StaticPatientRelations() { }
	}
}
